18.04.2025
添加了新场景测试
固定玩家周围进行场计算
好像还有多线程，反正优化很多最后可以固定到60帧左右

但是好像是由于敌人数量固定了 我看见好像spaner代码改变了。

还有问题，我应该只检查了gound object层作为障碍
为什么河流边界也有障碍？


晚上
进化了
我让写了bounds和visible area跟着玩家走的版本
在flow_field_test_infinite里面

我在考虑要不要删除水了，很烦
现在还是有检测，保证敌人不在水里生成，但是如果boss也在水里那不就不是成了？所以不行


干脆哪天直接把水去了，改为树的地形
16.04.2025
添加了茄子敌人，子弹，子弹特效。 cursor真强大。
茄子的子弹z排序为100，启用y排序，这样他就在最上层了
子弹碰撞为第二层 为啥？

14.04.2025
1. TileMap 层级设置
TileMap节点本身:
Y排序已启用 (y_sort_enabled = true)
作为整体相对于其他对象的排序
地形层 (TERRAIN_LAYER, 层0):
Z索引: -10 (set_layer_z_index(TERRAIN_LAYER, -10))
Y排序: 已启用 (set_layer_y_sort_enabled(TERRAIN_LAYER, true))
这确保地形（草地、水、路径）始终显示在最底层
树木层 (TREE_LAYER, 层1):
Z索引: 0 (set_layer_z_index(TREE_LAYER, 0))
Y排序: 已启用 (set_layer_y_sort_enabled(TREE_LAYER, true))
树木和障碍物显示在地形之上，但在角色之下
2. 玩家角色设置
Z索引: 10 (player.z_index = 10)
Z相对模式: 已启用 (player.z_as_relative = true)
位置: 应该是TileMap的同级节点，不应作为TileMap的子节点
Y排序: 依赖于父节点的Y排序功能
3. 敌人设置
Z索引: 与玩家相同，设置为10
Z相对模式: 已启用
位置: 与玩家相同，应是TileMap的同级节点
Y排序: 同样依赖于父节点的Y排序功能
4. 排序规则
整个场景的排序逻辑如下：
Z轴优先: 先根据Z索引排序（值小的在底层）：
地形层 (Z=-10) → 树木层 (Z=0) → 玩家/敌人 (Z=10)
Y轴位置: 在Z索引相同的情况下，根据Y坐标排序：
Y坐标大的对象（屏幕下方）会显示在Y坐标小的对象（屏幕上方）之上
这让角色能正确地在树木/障碍物前后移动
正确层级关系:
玩家和敌人不应该是TileMap的子节点
所有相关节点都应启用Y排序
地形永远在最底层，角色基于其Y坐标可以出现在树木/障碍物前面或后面
这样的设置确保了游戏中的深度错觉，让玩家能够在地图上自然地移动，正确地显示在障碍物前后方

场景根节点
└── YSortContainer (Node2D)
    ├── TileMap
    │   ├── 地形层 (Layer 0, Z=-10)
    │   └── 树木层 (Layer 1, Z=0)
    ├── Player (Z=10)
    └── Enemy (Z=10)
更新了层级

然后再tilemap里适当画碰撞和Y节点。底层Y节点不用。上层树Y节点需要设置为大于16，在根部以下

13.04.2025
添加了新武器，打蛋器
给每个敌人添加了敌人层，方便打蛋器寻找敌人

0.1.1
T 键可以升级武器
添加了士兵
修复擀面杖每次升级多次发射


0.1.0

character has stable version, can update weaponse, rotate big knife is repaired

太好了！问题终于解决了。
最终的原因是：角度 (angle) 属性没有被正确更新。
具体来说，问题出在以下几个关键点：
缺少调用 update_angle 函数：
在 player_test.gd 的 update_rotating_knives 函数中没有调用 update_angle 方法
而 update_angle 函数负责将菜刀的 angle 属性设置为从玩家到菜刀的方向向量
默认值问题：
chef_big_knife.gd 中的 angle 属性默认值是 Vector2.RIGHT
如果没有调用 update_angle 更新它，它就会保持这个向右的默认值
伤害系统的工作流程：
hurt_box.gd 中的代码在敌人受伤时会获取武器的 angle 属性
然后将这个方向传递给敌人的 _on_hurt_box_hurt 函数
如果 angle 始终是 Vector2.RIGHT，敌人就会一直向右击退
解决方案是确保在每次更新菜刀位置时，都调用 update_angle 函数来更新它的击退方向。这样，击退方向就会是从玩家位置指向菜刀的方向，实现相对玩家向外击退的效果。
这个问题展示了游戏开发中一个常见的陷阱：在多个系统交互时，确保所有必要的函数都被正确调用是很重要的，尤其是当涉及到默认值时。